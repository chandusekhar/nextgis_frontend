{"version":3,"file":"index.js","sources":["src/layer-adapters/MvtAdapter.ts","src/layer-adapters/TileAdapter.ts","src/layer-adapters/OsmAdapter.ts","src/MapboxglAdapter.ts"],"sourcesContent":["import mapboxgl from 'mapbox-gl';\r\n\r\nexport class MvtAdapter {\r\n  addLayer(map: mapboxgl.Map, name: string, options) {\r\n    // read about https://blog.mapbox.com/vector-tile-specification-version-2-whats-changed-259d4cd73df6\r\n    const idString = String(name);\r\n    map.addLayer({\r\n      'id': idString,\r\n      'type': 'fill',\r\n      'source-layer': idString,\r\n      'source': {\r\n        type: 'vector',\r\n        tiles: [options.url]\r\n      },\r\n      'layout': {\r\n        visibility: 'none'\r\n      },\r\n      'paint': {\r\n        'fill-color': 'red',\r\n        'fill-opacity': 0.8,\r\n        'fill-opacity-transition': {\r\n          duration: 0\r\n        },\r\n        'fill-outline-color': '#8b0000' // darkred\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n}\r\n","import mapboxgl from 'mapbox-gl';\r\n\r\nexport class TileAdapter {\r\n\r\n  addLayer(map: mapboxgl.Map, name: string, options) {\r\n\r\n    let tiles;\r\n    if (options && options.subdomains) {\r\n      tiles = options.subdomains.split('').map((x) => {\r\n        const subUrl = options.url.replace('{s}', x);\r\n        return subUrl;\r\n      });\r\n    } else {\r\n      tiles = [options.url];\r\n    }\r\n\r\n    map.addLayer({\r\n      id: name,\r\n      type: 'raster',\r\n      layout: {\r\n        visibility: 'none'\r\n      },\r\n      source: {\r\n        type: 'raster',\r\n        // point to our third-party tiles. Note that some examples\r\n        // show a \"url\" property. This only applies to tilesets with\r\n        // corresponding TileJSON (such as mapbox tiles).\r\n        tiles,\r\n        tileSize: options && options.tileSize || 256\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n}\r\n","import { TileAdapter } from './TileAdapter';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nexport class OsmAdapter extends TileAdapter {\r\n\r\n  options = {\r\n    url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n    attribution: '&copy; <a href=\"http://osm.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors',\r\n    subdomains: 'abc'\r\n  };\r\n\r\n  addLayer(map: mapboxgl.Map, name: string, options): string {\r\n    return super.addLayer(map, name, Object.assign({}, this.options, options));\r\n  }\r\n}\r\n","import { MvtAdapter } from './layer-adapters/MvtAdapter';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { OsmAdapter } from './layer-adapters/OsmAdapter';\r\nimport { TileAdapter } from './layer-adapters/TileAdapter';\r\n\r\nexport class MapboxglAdapter { // implements MapAdapter {\r\n\r\n  static layerAdapter = {\r\n    TILE: TileAdapter,\r\n    MVT: MvtAdapter,\r\n    OSM: OsmAdapter\r\n  };\r\n\r\n  options: any;\r\n\r\n  displayProjection = 'EPSG:3857';\r\n  lonlatProjection = 'EPSG:4326';\r\n\r\n  map: mapboxgl.Map;\r\n\r\n  _layers = {};\r\n  _baseLayers = [];\r\n  private DPI = 1000 / 39.37 / 0.28;\r\n  private IPM = 39.37;\r\n  private isLoaded = false;\r\n\r\n  // create(options: MapOptions = {target: 'map'}) {\r\n  create(options) {\r\n    this.options = options;\r\n    this.map = new mapboxgl.Map({\r\n      container: options.target,\r\n      center: [96, 63], // initial map center in [lon, lat]\r\n      zoom: 2,\r\n      style: {\r\n        version: 8,\r\n        name: 'Empty style',\r\n        sources: {},\r\n        layers: [],\r\n      }\r\n    });\r\n  }\r\n\r\n  setCenter(latLng: [number, number]) {\r\n    // ignore\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    // ignore\r\n  }\r\n\r\n  fit(extent) {\r\n    // ignore\r\n  }\r\n\r\n  setRotation(angle: number) {\r\n    // ignore\r\n  }\r\n\r\n  showLayer(layerName: string) {\r\n    this.onMapLoad(() => this.toggleLayer(layerName, true));\r\n  }\r\n\r\n  hideLayer(layerName: string) {\r\n    this.onMapLoad(() => this.toggleLayer(layerName, false));\r\n  }\r\n\r\n  addBaseLayer(name, providerDef, options?) {\r\n    this.onMapLoad(() => {\r\n      const layerId = this.addLayer(name, providerDef, options);\r\n      if (layerId) {\r\n        this._baseLayers.push(layerId);\r\n      }\r\n    });\r\n  }\r\n\r\n  addLayer(layerName: string, adapterDef, options?) {\r\n    let adapterEngine;\r\n    if (typeof adapterDef === 'string') {\r\n      adapterEngine = MapboxglAdapter.layerAdapter[adapterDef];\r\n    }\r\n    if (adapterEngine) {\r\n      const adapter = new adapterEngine(options);\r\n      const layerId = adapter.addLayer(this.map, layerName, options);\r\n      this._layers[layerId] = false;\r\n      return layerId;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  removeLayer(layerName: string) {\r\n    // this._toggleLayer(false, layerName);\r\n  }\r\n\r\n\r\n  getScaleForResolution(res, mpu) {\r\n    return parseFloat(res) * (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  getResolutionForScale(scale, mpu) {\r\n    return parseFloat(scale) / (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  onMapLoad(cb, context?) {\r\n    if (this.isLoaded) { // map.loaded()\r\n      cb.call(context);\r\n    } else {\r\n      this.map.once('load', () => {\r\n        cb.call(context);\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleLayer(layerId, status) {\r\n    const exist = this._layers[layerId];\r\n\r\n    if (exist !== undefined && exist !== status) {\r\n      this.map.setLayoutProperty(layerId, 'visibility', status ? 'visible' : 'none');\r\n      this._layers[layerId] = status;\r\n    }\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}